{"filter":false,"title":"ddropdownpanel.js","tooltip":"/ddropdownpanel.js","undoManager":{"mark":11,"position":11,"stack":[[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":170,"column":2},"action":"insert","lines":["//** DD Drop Down Panel- (c) Dynamic Drive DHTML code library: http://www.dynamicdrive.com","//** Oct 21st, 08'- Script created","//** March 23rd, 09' v1.01- Arrow images now preloaded","","function ddpanel(setting){","\tsetting.dir=\"up\" //initial state of panel (up=\"contracted\")","\tif (setting.stateconfig.persiststate && ddpanel.getCookie(setting.ids[0])==\"down\"){","\t\tsetting.dir=\"down\"","\t}","\tif (setting.dir==\"up\"){ //if \"up\", output CSS to hide panel contents","\t\tdocument.write('<style type=\"text/css\">\\n')","\t\tdocument.write('#'+setting.ids[1]+'{height:' + parseInt(setting.stateconfig.initial) + 'px; overflow:hidden}\\n')","\t\tdocument.write('</style>\\n')","\t}","\tsetting.stateconfig.initial=parseInt(setting.stateconfig.initial)","\tthis.setting=setting","\tif (setting.pointerimage.enabled){ //preload images","\t\tvar img1=new Image(), img2=new Image()","\t\timg1.src=setting.pointerimage.src[0]","\t\timg2.src=setting.pointerimage.src[1]","\t}","\tvar thispanel=this","\tif (window.addEventListener) //if non IE browsers, initialize panel window.onload","\t\tddpanel.addEvent(window, function(e){thispanel.initpanel(setting)}, \"load\")","\telse //else if IE, add 100 millisec after window.onload before initializing","\t\tddpanel.addEvent(window, function(e){setTimeout(function(){thispanel.initpanel(setting)}, 100)}, \"load\")","\tddpanel.addEvent(window, function(e){thispanel.uninit(setting)}, \"unload\")","}","","ddpanel.events_array=[] //object array to contain events created by script","","ddpanel.addEvent=function(target, functionref, tasktype){","\tvar evtmodel=target.addEventListener? \"w3c\" : \"ie\"","\tvar evtaction=evtmodel==\"w3c\"? \"addEventListener\" : \"attachEvent\"","\tvar i=this.events_array.push({ //store event info in ddpanel.events_array[] and return current event's index within array","\t\ttarget: target,","\t\ttasktype: (evtmodel==\"ie\"? \"on\" : \"\")+tasktype,","\t\tlistener: evtmodel==\"ie\"? function(){return functionref.call(target, window.event)} : functionref","\t})-1","\ttarget[evtaction](this.events_array[i].tasktype, this.events_array[i].listener, evtmodel==\"w3c\"? false : null)","}","","ddpanel.removeEvent=function(target, functionref, tasktype){","\tvar evtmodel=target.removeEventListener? \"w3c\" : \"ie\"","\tvar evtaction=evtmodel==\"w3c\"? \"removeEventListener\" : \"detachEvent\"","\ttarget[evtaction](tasktype, functionref, evtmodel==\"w3c\"? false : null)","}","","ddpanel.getCookie=function(Name){ ","\tvar re=new RegExp(Name+\"=[^;]+\", \"i\"); //construct RE to search for target name/value pair","\tif (document.cookie.match(re)) //if cookie found","\t\treturn document.cookie.match(re)[0].split(\"=\")[1] //return its value","\treturn null","}","","ddpanel.setCookie=function(name, value){","\tdocument.cookie = name+\"=\" + value + \";path=/\"","}","","ddpanel.addpointer=function(target, className, imagesrc){","\tvar pointer=document.createElement(\"img\")","\tpointer.src=imagesrc","\tpointer.className=className","\tpointer.style.borderWidth=0","\ttarget.appendChild(pointer)","\treturn pointer","}","","ddpanel.prototype={","","togglepanel:function(dir){ //public function that toggles the panel's state. Optional dir parameter (\"up\" or \"down\") to explicitly set state.","\tvar setting=this.setting","\tsetting.dir=dir || ((setting.dir==\"up\")? \"down\" : \"up\")","\tvar pcontent=setting.pcontent, dir=setting.dir","\tpcontent._currentheight=(dir==\"down\")? pcontent._actualheight : setting.stateconfig.initial","\tpcontent.style.height=pcontent._currentheight+\"px\"","\tif (setting.pointerimage.enabled){","\t\tsetting.arrow.src=setting.pointerimage.src[(setting.dir==\"down\")? 1 : 0]","\t\tsetting.arrow.style.visibility=\"visible\"","\t}","\tddpanel.setCookie(setting.ids[0], setting.dir)","},","","togglepanelplus:function(dir){ //public function that toggles the panel's state w/ animation. Optional dir parameter (\"up\" or \"down\") to explicitly set state.","\tvar setting=this.setting","\tsetting.dir=dir || ((setting.dir==\"up\")? \"down\" : \"up\")","\tif (setting.pointerimage.enabled)","\t\tsetting.arrow.style.visibility=\"hidden\"","\tclearTimeout(setting.revealtimer)","\tthis.revealcontent()","},","","revealcontent:function(){","\tvar setting=this.setting","\tvar pcontent=setting.pcontent, curH=pcontent._currentheight, maxH=pcontent._actualheight, minH=setting.stateconfig.initial, steps=setting.animate.steps, dir=setting.dir","\tif (dir==\"down\" && curH<maxH || dir==\"up\" && curH>minH){","\t\tvar newH = curH + (Math.round((maxH-curH)/steps)+1) * (dir==\"up\"? -1 : 1)","\t\tnewH=(dir==\"down\")? Math.min(maxH, newH) : Math.max(minH, newH)","\t\tpcontent.style.height=newH+\"px\"","\t\tpcontent._currentheight=newH","\t}","\telse{","\t\tif (setting.pointerimage.enabled){","\t\t\tsetting.arrow.src=setting.pointerimage.src[(setting.dir==\"down\")? 1 : 0]","\t\t\tsetting.arrow.style.visibility=\"visible\"","\t\t}","\t\treturn","\t}","\tvar thispanel=this","\tsetting.revealtimer=setTimeout(function(){thispanel.revealcontent()}, 10)","},","","initpanel:function(){","\tvar setting=this.setting","\tvar pcontainer=setting.pcontainer=document.getElementById(setting.ids[0])","\tvar pcontent=setting.pcontent=document.getElementById(setting.ids[1])","\tvar tdiv=setting.tdiv=document.getElementById(setting.ids[2])","\tpcontent.style.overflow=\"scroll\"","\tpcontent._actualheight=pcontent.scrollHeight","\tsetTimeout(function(){pcontent._actualheight=pcontent.scrollHeight}, 100)","\tpcontent.style.overflow=\"hidden\"","\tpcontent._currentheight=(setting.dir==\"down\")? pcontent._actualheight : setting.stateconfig.initial","\tvar thispanel=this","\tddpanel.addEvent(tdiv, function(e){ //assign click behavior when toggle DIV tab is clicked on","\t\tif (setting.animate.enabled)","\t\t\tthispanel.togglepanelplus()","\t\telse","\t\t\tthispanel.togglepanel()","\t\tif (e.preventDefault) e.preventDefault()","\t\treturn false","\t}, \"click\")","\tif (setting.pointerimage.enabled){","\t\tvar pointer1=new Image(), pointer2=new Image()","\t\tpointer1.src=setting.pointerimage.src[0]","\t\tpointer2.src=setting.pointerimage.src[1]","\t\tsetting.arrow=ddpanel.addpointer(tdiv.getElementsByTagName(\"span\")[0], \"pointerimage\", setting.pointerimage.src[setting.dir==\"down\"? 1:0])","\t}","\tif (setting.closepanelonclick.enabled){ //assign click behavior when panel content is clicked on (links within panel or elements with class \"closepanel\"","\t\t\tddpanel.addEvent(pcontent, function(e){","\t\t\t\tvar target=e.srcElement || e.target","\t\t\t\tif (/(^|\\s+)closepanel($|\\s+)/.test(target.className) || target.tagName==\"A\" || (target.parentNode && target.parentNode.tagName==\"A\")){","\t\t\t\t\tthispanel.togglepanel(\"up\")","\t\t\t\t}","\t\t\t}, \"click\")","\t}","},","","uninit:function(){","\tvar setting=this.setting","\tif (setting.stateconfig.persiststate){","\t\tddpanel.setCookie(setting.ids[0], setting.dir)","\t}","\tfor (prop in setting){","\t\tsetting[prop]=null","\t}","}","","","","} //end of ddpanel object","","","//initialize instance of DD Drop Down Panel:","","var defaultpanel=new ddpanel({","\tids: [\"mypanel\", \"mypanelcontent\", \"mypaneltab\"], // id of main panel DIV, content DIV, and tab DIV","\tstateconfig: {initial: \"5px\", persiststate: true}, // initial: initial reveal amount in pixels (ie: 5px)","\tanimate: {enabled: true, steps: 5}, //steps: number of animation steps. Int between 1-20. Smaller=faster.","\tpointerimage: {enabled: true, src: [\"arrow-down.gif\", \"arrow-up.gif\"]},","\tclosepanelonclick: {enabled: true} // close panel when links or elements with CSS class=\"closepanel\" within container is clicked on?","})"]}]}],[{"group":"doc","deltas":[{"start":{"row":170,"column":2},"end":{"row":170,"column":3},"action":"insert","lines":["s"]}]}],[{"group":"doc","deltas":[{"start":{"row":170,"column":2},"end":{"row":170,"column":3},"action":"remove","lines":["s"]}]}],[{"group":"doc","deltas":[{"start":{"row":164,"column":30},"end":{"row":164,"column":31},"action":"insert","lines":["s"]}]}],[{"group":"doc","deltas":[{"start":{"row":164,"column":31},"end":{"row":164,"column":32},"action":"insert","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":164,"column":32},"end":{"row":164,"column":33},"action":"insert","lines":["t"]}]}],[{"group":"doc","deltas":[{"start":{"row":164,"column":33},"end":{"row":164,"column":34},"action":"insert","lines":["t"]}]}],[{"group":"doc","deltas":[{"start":{"row":164,"column":34},"end":{"row":164,"column":35},"action":"insert","lines":["i"]}]}],[{"group":"doc","deltas":[{"start":{"row":164,"column":35},"end":{"row":164,"column":36},"action":"insert","lines":["n"]}]}],[{"group":"doc","deltas":[{"start":{"row":164,"column":36},"end":{"row":164,"column":37},"action":"insert","lines":["g"]}]}],[{"group":"doc","deltas":[{"start":{"row":164,"column":37},"end":{"row":164,"column":38},"action":"insert","lines":["}"]}]}],[{"group":"doc","deltas":[{"start":{"row":164,"column":38},"end":{"row":164,"column":39},"action":"insert","lines":[")"]}]}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":2,"column":54},"end":{"row":2,"column":54},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":103,"state":"no_regex","mode":"ace/mode/javascript"}},"timestamp":1425366325587,"hash":"93832394b400aa7cc2cbb2ae9e3d16fcd7e054de"}
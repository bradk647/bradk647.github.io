{"filter":false,"title":"imagepanner.js","tooltip":"/TypeWeb/imagepanner.js","undoManager":{"mark":0,"position":0,"stack":[[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":126,"column":2},"action":"insert","lines":["/* Simple Image Panner and Zoomer (March 11th, 10)","* This notice must stay intact for usage ","* Author: Dynamic Drive at http://www.dynamicdrive.com/","* Visit http://www.dynamicdrive.com/ for full source code","*/","","// v1.1 (March 25th, 10): Updated with ability to zoom in/out of image","// v1.2 (Oct 1st, 14): Script now works on mobile devices, zoom in/out controls can be any arbitrary HTML (instead of images specifically).","","jQuery.noConflict()","","var ddimagepanner={","","\t// set default HTML for \"zoom in\" and \"zoom out\" controls, respectively","\tmagnifyicons: ['<img src=\"magnify.gif\" class=\"zoomcontrols\" style=\"right:40px; bottom: 5px;\" />', '<img src=\"magnify2.gif\" class=\"zoomcontrols\" style=\"right:5px; bottom: 5px;\" />'],","\tmaxzoom: 4, //set maximum zoom level (from 1x)","","\tinit:function($, $img, options){","\t\tvar s=options","\t\ts.imagesize=[$img.width(), $img.height()]","\t\ts.oimagesize=[$img.width(), $img.height()] //always remember image's original size","\t\ts.pos=(s.pos==\"center\")? [-(s.imagesize[0]/2-s.wrappersize[0]/2), -(s.imagesize[1]/2-s.wrappersize[1]/2)] : [0, 0] //initial coords of image","\t\ts.pos=[Math.floor(s.pos[0]), Math.floor(s.pos[1])]","\t\t$img.css({position:'absolute', left:s.pos[0], top:s.pos[1]})","\t\tif (s.canzoom==\"yes\"){ //enable image zooming?","\t\t\ts.dragcheck={h: (s.wrappersize[0]>s.imagesize[0])? false:true, v:(s.wrappersize[1]>s.imagesize[1])? false:true} //check if image should be draggable horizon and vertically","\t\t\ts.$statusdiv=$('<div style=\"position:absolute;color:white;background:#353535;padding:2px 10px;font-size:12px;visibility:hidden\">1x Magnify</div>').appendTo(s.$pancontainer) //create DIV to show current magnify level","\t\t\ts.$statusdiv.css({left:0, top:s.wrappersize[1]-s.$statusdiv.outerHeight(), display:'none', visibility:'visible'})","\t\t\tthis.zoomfunct($, $img, s)","\t\t}","\t\tthis.dragimage($, $img, s)","\t},","","\tdragimage:function($, $img, s){","\t\t$img.bind('mousedown touchstart', function(e){","\t\t\tvar e = (e.type.indexOf('touch') != -1)? e.originalEvent.changedTouches[0] : e","\t\t\ts.pos=[parseInt($img.css('left')), parseInt($img.css('top'))]","\t\t\tvar xypos=[e.clientX, e.clientY]","\t\t\t$img.bind('mousemove.dragstart touchmove.dragstart', function(e){","\t\t\t\tvar e = (e.type.indexOf('touch') != '-1')? e.originalEvent.changedTouches[0] : e","\t\t\t\tvar pos=s.pos, imagesize=s.imagesize, wrappersize=s.wrappersize","\t\t\t\tvar dx=e.clientX-xypos[0] //distance to move horizontally","\t\t\t\tvar dy=e.clientY-xypos[1] //vertically","\t\t\t\ts.dragcheck={h: (wrappersize[0]>imagesize[0])? false:true, v:(wrappersize[1]>imagesize[1])? false:true}","\t\t\t\tif (s.dragcheck.h==true) //allow dragging horizontally?","\t\t\t\t\tvar newx=(dx>0)? Math.min(0, pos[0]+dx) : Math.max(-imagesize[0]+wrappersize[0], pos[0]+dx) //Set horizonal bonds. dx>0 indicates drag right versus left","\t\t\t\tif (s.dragcheck.v==true) //allow dragging vertically?","\t\t\t\t\tvar newy=(dy>0)? Math.min(0, s.pos[1]+dy) : Math.max(-imagesize[1]+wrappersize[1], pos[1]+dy) //Set vertical bonds. dy>0 indicates drag downwards versus up","\t\t\t\t$img.css({left:(typeof newx!=\"undefined\")? newx : pos[0], top:(typeof newy!=\"undefined\")? newy : pos[1]})","\t\t\t\treturn false //cancel default drag action","\t\t\t})","\t\t\treturn false //cancel default drag action","\t\t})","\t\t$(document).bind('mouseup touchend', function(e){","\t\t\tvar e = (e.type.indexOf('touch') != -1)? e.originalEvent.changedTouches[0] : e","\t\t\t$img.unbind('mousemove.dragstart touchmove.dragstart')","\t\t})","\t},","","\tzoomfunct:function($, $img, s){","\t\tvar magnifyicons=this.magnifyicons","\t\tvar $zoomimages = $(magnifyicons.join(''))","\t\t\t.css({zIndex:1000, cursor:'pointer', opacity:0.7})","\t\t\t.attr(\"title\", \"Zoom Out\")","\t\t\t.appendTo(s.$pancontainer)","\t\t$zoomimages.eq(0).css({opacity:1})","\t\t\t.attr(\"title\", \"Zoom In\")","\t\t$zoomimages.click(function(e){ //assign click behavior to zoom images","\t\t\tvar $zimg=$(this) //reference image clicked on","\t\t\tvar curzoom=s.curzoom //get current zoom level","\t\t\tvar zoomtype=($zimg.attr(\"title\").indexOf(\"In\")!=-1)? \"in\" : \"out\"","\t\t\tif (zoomtype==\"in\" && s.curzoom==ddimagepanner.maxzoom || zoomtype==\"out\" && s.curzoom==1) //exit if user at either ends of magnify levels","\t\t\t\treturn","\t\t\tvar basepos=[s.pos[0]/curzoom, s.pos[1]/curzoom]","\t\t\tvar newzoom=(zoomtype==\"out\")? Math.max(1, curzoom-1) : Math.min(ddimagepanner.maxzoom, curzoom+1) //get new zoom level","\t\t\t$zoomimages.css(\"opacity\", 1)","\t\t\tif (newzoom==1) //if zoom level is 1x, dim \"zoom out\" image","\t\t\t\t$zoomimages.eq(1).css(\"opacity\", 0.7)","\t\t\telse if (newzoom==ddimagepanner.maxzoom) //if zoom level is max level, dim \"zoom in\" image","\t\t\t\t$zoomimages.eq(0).css(\"opacity\", 0.7)","\t\t\tclearTimeout(s.statustimer)","\t\t\ts.$statusdiv.html(newzoom+\"x Magnify\").show() //show current zoom status/level","\t\t\tvar nd=[s.oimagesize[0]*newzoom, s.oimagesize[1]*newzoom]","\t\t\tvar newpos=[basepos[0]*newzoom, basepos[1]*newzoom]","\t\t\tnewpos=[(zoomtype==\"in\" && s.wrappersize[0]>s.imagesize[0] || zoomtype==\"out\" && s.wrappersize[0]>nd[0])? s.wrappersize[0]/2-nd[0]/2 : Math.max(-nd[0]+s.wrappersize[0], newpos[0]),","\t\t\t\t(zoomtype==\"in\" && s.wrappersize[1]>s.imagesize[1] || zoomtype==\"out\" && s.wrappersize[1]>nd[1])? s.wrappersize[1]/2-nd[1]/2 : Math.max(-nd[1]+s.wrappersize[1], newpos[1])]","\t\t\t$img.animate({width:nd[0], height:nd[1], left:newpos[0], top:newpos[1]}, function(){","\t\t\t\ts.statustimer=setTimeout(function(){s.$statusdiv.hide()}, 500)","\t\t\t})","\t\t\ts.imagesize=nd","\t\t\ts.curzoom=newzoom","\t\t\ts.pos=[newpos[0], newpos[1]]","\t\t})","\t}","","}","","","jQuery.fn.imgmover=function(options){","\tvar $=jQuery","\treturn this.each(function(){ //return jQuery obj","\t\tif (this.tagName!=\"IMG\")","\t\t\treturn true //skip to next matched element ","\t\tvar $imgref=$(this)","\t\tif (parseInt(this.style.width)>0 && parseInt(this.style.height)>0) //if image has explicit CSS width/height defined","\t\t\tddimagepanner.init($, $imgref, options)","\t\telse if (this.complete){ //account for IE not firing image.onload","\t\t\tddimagepanner.init($, $imgref, options)","\t\t}","\t\telse{","\t\t\t$imgref.bind('load', function(){","\t\t\t\tddimagepanner.init($, $imgref, options)","\t\t\t})","\t\t}","\t})","}","","","jQuery(document).ready(function($){ //By default look for DIVs with class=\"pancontainer\"","\tvar $pancontainer=$('div.pancontainer')","\t$pancontainer.each(function(){","\t\tvar $this=$(this).css({position:'relative', overflow:'hidden', cursor:'move'})","\t\tvar $img=$this.find('img:eq(0)') //image to pan","\t\tvar options={$pancontainer:$this, pos:$this.attr('data-orient'), curzoom:1, canzoom:$this.attr('data-canzoom'), wrappersize:[$this.width(), $this.height()]}","\t\t$img.imgmover(options)","\t})","})"]}]}]]},"ace":{"folds":[],"scrolltop":409,"scrollleft":0,"selection":{"start":{"row":126,"column":2},"end":{"row":126,"column":2},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":24,"state":"start","mode":"ace/mode/javascript"}},"timestamp":1428550686673,"hash":"1009ea693c482ada21125e047a6ca82c2d78f0b4"}